# aws_instance.bastion_host:
resource "aws_instance" "bastion_host" {
    ami                                  = "ami-0cb91c7de36eed2cb"
    arn                                  = "arn:aws:ec2:us-east-2:051826722045:instance/i-090e634b923cd170c"
    associate_public_ip_address          = false
    availability_zone                    = "us-east-2a"
    cpu_core_count                       = 1
    cpu_threads_per_core                 = 1
    disable_api_stop                     = false
    disable_api_termination              = true
    ebs_optimized                        = false
    enable_primary_ipv6                  = false
    get_password_data                    = false
    hibernation                          = false
    id                                   = "i-090e634b923cd170c"
    instance_initiated_shutdown_behavior = "stop"
    instance_state                       = "stopped"
    instance_type                        = "t2.micro"
    ipv6_address_count                   = 1
    ipv6_addresses                       = [
        "2600:1f16:610:4823:f5ed:d35e:b18f:8d25",
    ]
    key_name                             = "bastion-key"
    monitoring                           = false
    placement_partition_number           = 0
    primary_network_interface_id         = "eni-01c3cedf5095a0cc0"
    private_dns                          = "ip-10-0-14-14.us-east-2.compute.internal"
    private_ip                           = "10.0.14.14"
    secondary_private_ips                = []
    security_groups                      = []
    source_dest_check                    = true
    subnet_id                            = "subnet-0fc0eac71d712c09f"
    tags                                 = {
        "Name" = "Bastion-Host"
    }
    tags_all                             = {
        "Name" = "Bastion-Host"
    }
    tenancy                              = "default"
    vpc_security_group_ids               = [
        "sg-001dbbdd4a6e8b737",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    cpu_options {
        core_count       = 1
        threads_per_core = 1
    }

    credit_specification {
        cpu_credits = "standard"
    }

    enclave_options {
        enabled = false
    }

    maintenance_options {
        auto_recovery = "default"
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_protocol_ipv6          = "disabled"
        http_put_response_hop_limit = 2
        http_tokens                 = "required"
        instance_metadata_tags      = "disabled"
    }

    private_dns_name_options {
        enable_resource_name_dns_a_record    = false
        enable_resource_name_dns_aaaa_record = true
        hostname_type                        = "ip-name"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/sda1"
        encrypted             = false
        iops                  = 3000
        tags                  = {}
        tags_all              = {}
        throughput            = 125
        volume_id             = "vol-0d1e1b4c494826322"
        volume_size           = 8
        volume_type           = "gp3"
    }
}

# aws_instance.c2_server:
resource "aws_instance" "c2_server" {
    ami                                  = "ami-0cb91c7de36eed2cb"
    arn                                  = "arn:aws:ec2:us-east-2:051826722045:instance/i-0555ddeac427c7037"
    associate_public_ip_address          = false
    availability_zone                    = "us-east-2a"
    cpu_core_count                       = 1
    cpu_threads_per_core                 = 1
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = false
    get_password_data                    = false
    hibernation                          = false
    id                                   = "i-0555ddeac427c7037"
    instance_initiated_shutdown_behavior = "stop"
    instance_state                       = "stopped"
    instance_type                        = "t2.micro"
    ipv6_address_count                   = 0
    ipv6_addresses                       = []
    key_name                             = "c2-key"
    monitoring                           = false
    placement_partition_number           = 0
    primary_network_interface_id         = "eni-07d77aeb0fab4f73a"
    private_dns                          = "ip-10-0-129-15.us-east-2.compute.internal"
    private_ip                           = "10.0.129.15"
    secondary_private_ips                = []
    security_groups                      = []
    source_dest_check                    = true
    subnet_id                            = "subnet-0bc464702a0e1f783"
    tags                                 = {
        "Name" = "C2-Server"
    }
    tags_all                             = {
        "Name" = "C2-Server"
    }
    tenancy                              = "default"
    vpc_security_group_ids               = [
        "sg-0f0cf32e4a8119c8a",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    cpu_options {
        core_count       = 1
        threads_per_core = 1
    }

    credit_specification {
        cpu_credits = "standard"
    }

    enclave_options {
        enabled = false
    }

    maintenance_options {
        auto_recovery = "default"
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_protocol_ipv6          = "disabled"
        http_put_response_hop_limit = 2
        http_tokens                 = "required"
        instance_metadata_tags      = "disabled"
    }

    private_dns_name_options {
        enable_resource_name_dns_a_record    = false
        enable_resource_name_dns_aaaa_record = false
        hostname_type                        = "ip-name"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/sda1"
        encrypted             = true
        iops                  = 3000
        kms_key_id            = "arn:aws:kms:us-east-2:051826722045:key/d6e65608-499b-4597-b1da-57d024874317"
        tags                  = {}
        tags_all              = {}
        throughput            = 125
        volume_id             = "vol-09700b6f2348551aa"
        volume_size           = 20
        volume_type           = "gp3"
    }
}

# aws_instance.redirector:
resource "aws_instance" "redirector" {
    ami                                  = "ami-0cb91c7de36eed2cb"
    arn                                  = "arn:aws:ec2:us-east-2:051826722045:instance/i-0762d82c73543099e"
    associate_public_ip_address          = false
    availability_zone                    = "us-east-2a"
    cpu_core_count                       = 1
    cpu_threads_per_core                 = 1
    disable_api_stop                     = false
    disable_api_termination              = false
    ebs_optimized                        = false
    enable_primary_ipv6                  = false
    get_password_data                    = false
    hibernation                          = false
    id                                   = "i-0762d82c73543099e"
    instance_initiated_shutdown_behavior = "stop"
    instance_lifecycle                   = "spot"
    instance_state                       = "stopped"
    instance_type                        = "t2.micro"
    ipv6_address_count                   = 1
    ipv6_addresses                       = [
        "2600:1f16:610:4820:f2b:8e9e:8370:5895",
    ]
    key_name                             = "redirector-key"
    monitoring                           = false
    placement_partition_number           = 0
    primary_network_interface_id         = "eni-08cecf3878df2a44c"
    private_dns                          = "ip-10-0-5-237.us-east-2.compute.internal"
    private_ip                           = "10.0.5.237"
    secondary_private_ips                = []
    security_groups                      = []
    source_dest_check                    = true
    spot_instance_request_id             = "sir-2x7f391h"
    subnet_id                            = "subnet-0fc0eac71d712c09f"
    tags                                 = {
        "Name" = "Redirector"
    }
    tags_all                             = {
        "Name" = "Redirector"
    }
    tenancy                              = "default"
    vpc_security_group_ids               = [
        "sg-023e4f2beafa49b3b",
    ]

    capacity_reservation_specification {
        capacity_reservation_preference = "open"
    }

    cpu_options {
        core_count       = 1
        threads_per_core = 1
    }

    credit_specification {
        cpu_credits = "standard"
    }

    enclave_options {
        enabled = false
    }

    instance_market_options {
        market_type = "spot"

        spot_options {
            instance_interruption_behavior = "stop"
            max_price                      = "0.011600"
            spot_instance_type             = "persistent"
        }
    }

    maintenance_options {
        auto_recovery = "default"
    }

    metadata_options {
        http_endpoint               = "enabled"
        http_protocol_ipv6          = "disabled"
        http_put_response_hop_limit = 2
        http_tokens                 = "required"
        instance_metadata_tags      = "disabled"
    }

    private_dns_name_options {
        enable_resource_name_dns_a_record    = false
        enable_resource_name_dns_aaaa_record = true
        hostname_type                        = "ip-name"
    }

    root_block_device {
        delete_on_termination = true
        device_name           = "/dev/sda1"
        encrypted             = false
        iops                  = 3000
        tags                  = {}
        tags_all              = {}
        throughput            = 125
        volume_id             = "vol-0a7271ac1eeaf49aa"
        volume_size           = 8
        volume_type           = "gp3"
    }
}

# aws_security_group.bastion_sg:
resource "aws_security_group" "bastion_sg" {
    arn         = "arn:aws:ec2:us-east-2:051826722045:security-group/sg-001dbbdd4a6e8b737"
    description = "For SSH via Cloudflare"
    egress      = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = [
                "::/0",
            ]
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id          = "sg-001dbbdd4a6e8b737"
    ingress     = [
        {
            cidr_blocks      = []
            description      = "SSH from anywhere"
            from_port        = 22
            ipv6_cidr_blocks = [
                "::/0",
            ]
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 22
        },
    ]
    name        = "Bastion-SG"
    owner_id    = "051826722045"
    tags        = {}
    tags_all    = {}
    vpc_id      = "vpc-02ec25b78157e3222"
}

# aws_security_group.c2_server_sg:
resource "aws_security_group" "c2_server_sg" {
    arn         = "arn:aws:ec2:us-east-2:051826722045:security-group/sg-0f0cf32e4a8119c8a"
    description = "For C2, RedELK, Phishing, Payload Server"
    egress      = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = [
                "::/0",
            ]
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id          = "sg-0f0cf32e4a8119c8a"
    ingress     = [
        {
            cidr_blocks      = []
            description      = "Allow Cobalt Strike client to connect through SSH tunnel"
            from_port        = 50050
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-001dbbdd4a6e8b737",
            ]
            self             = false
            to_port          = 50050
        },
        {
            cidr_blocks      = []
            description      = "C2 Traffic from Redirector"
            from_port        = 443
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-023e4f2beafa49b3b",
            ]
            self             = false
            to_port          = 443
        },
        {
            cidr_blocks      = []
            description      = "From Bastion-SG only"
            from_port        = 22
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-001dbbdd4a6e8b737",
            ]
            self             = false
            to_port          = 22
        },
        {
            cidr_blocks      = []
            description      = "Internal traffic b/n servers"
            from_port        = 0
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = true
            to_port          = 65535
        },
    ]
    name        = "Private-SG"
    owner_id    = "051826722045"
    tags        = {}
    tags_all    = {}
    vpc_id      = "vpc-02ec25b78157e3222"
}

# aws_security_group.redirector_sg:
resource "aws_security_group" "redirector_sg" {
    arn         = "arn:aws:ec2:us-east-2:051826722045:security-group/sg-023e4f2beafa49b3b"
    description = "Allow HTTP(S) inbound from anywhere."
    egress      = [
        {
            cidr_blocks      = [
                "0.0.0.0/0",
            ]
            description      = ""
            from_port        = 0
            ipv6_cidr_blocks = [
                "::/0",
            ]
            prefix_list_ids  = []
            protocol         = "-1"
            security_groups  = []
            self             = false
            to_port          = 0
        },
    ]
    id          = "sg-023e4f2beafa49b3b"
    ingress     = [
        {
            cidr_blocks      = []
            description      = ""
            from_port        = 443
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-0f0cf32e4a8119c8a",
            ]
            self             = false
            to_port          = 443
        },
        {
            cidr_blocks      = []
            description      = ""
            from_port        = 80
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-0f0cf32e4a8119c8a",
            ]
            self             = false
            to_port          = 80
        },
        {
            cidr_blocks      = []
            description      = "C2 Traffic and payloads for SSL traffic"
            from_port        = 443
            ipv6_cidr_blocks = [
                "::/0",
            ]
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 443
        },
        {
            cidr_blocks      = []
            description      = "SSH from Bastion"
            from_port        = 22
            ipv6_cidr_blocks = []
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = [
                "sg-001dbbdd4a6e8b737",
            ]
            self             = false
            to_port          = 22
        },
        {
            cidr_blocks      = []
            description      = "Used for phishing landing pages"
            from_port        = 80
            ipv6_cidr_blocks = [
                "::/0",
            ]
            prefix_list_ids  = []
            protocol         = "tcp"
            security_groups  = []
            self             = false
            to_port          = 80
        },
    ]
    name        = "Public-SG"
    owner_id    = "051826722045"
    tags        = {}
    tags_all    = {}
    vpc_id      = "vpc-02ec25b78157e3222"
}

# aws_subnet.bastion_subnet:
resource "aws_subnet" "bastion_subnet" {
    arn                                            = "arn:aws:ec2:us-east-2:051826722045:subnet/subnet-0fc0eac71d712c09f"
    assign_ipv6_address_on_creation                = true
    availability_zone                              = "us-east-2a"
    availability_zone_id                           = "use2-az1"
    cidr_block                                     = "10.0.0.0/20"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0fc0eac71d712c09f"
    ipv6_cidr_block                                = "2600:1f16:610:4800::/56"
    ipv6_cidr_block_association_id                 = "subnet-cidr-assoc-029611758105e8dc3"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    owner_id                                       = "051826722045"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "TestVPC-subnet-public1-us-east-2a"
    }
    tags_all                                       = {
        "Name" = "TestVPC-subnet-public1-us-east-2a"
    }
    vpc_id                                         = "vpc-02ec25b78157e3222"
}

# aws_subnet.c2_subnet:
resource "aws_subnet" "c2_subnet" {
    arn                                            = "arn:aws:ec2:us-east-2:051826722045:subnet/subnet-0bc464702a0e1f783"
    assign_ipv6_address_on_creation                = false
    availability_zone                              = "us-east-2a"
    availability_zone_id                           = "use2-az1"
    cidr_block                                     = "10.0.128.0/20"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0bc464702a0e1f783"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = true
    owner_id                                       = "051826722045"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "TestVPC-subnet-private1-us-east-2a"
    }
    tags_all                                       = {
        "Name" = "TestVPC-subnet-private1-us-east-2a"
    }
    vpc_id                                         = "vpc-02ec25b78157e3222"
}

# aws_subnet.redirector_subnet:
resource "aws_subnet" "redirector_subnet" {
    arn                                            = "arn:aws:ec2:us-east-2:051826722045:subnet/subnet-0fc0eac71d712c09f"
    assign_ipv6_address_on_creation                = true
    availability_zone                              = "us-east-2a"
    availability_zone_id                           = "use2-az1"
    cidr_block                                     = "10.0.0.0/20"
    enable_dns64                                   = false
    enable_lni_at_device_index                     = 0
    enable_resource_name_dns_a_record_on_launch    = false
    enable_resource_name_dns_aaaa_record_on_launch = false
    id                                             = "subnet-0fc0eac71d712c09f"
    ipv6_cidr_block                                = "2600:1f16:610:4800::/56"
    ipv6_cidr_block_association_id                 = "subnet-cidr-assoc-029611758105e8dc3"
    ipv6_native                                    = false
    map_customer_owned_ip_on_launch                = false
    map_public_ip_on_launch                        = false
    owner_id                                       = "051826722045"
    private_dns_hostname_type_on_launch            = "ip-name"
    tags                                           = {
        "Name" = "TestVPC-subnet-public1-us-east-2a"
    }
    tags_all                                       = {
        "Name" = "TestVPC-subnet-public1-us-east-2a"
    }
    vpc_id                                         = "vpc-02ec25b78157e3222"
}

# aws_vpc.main:
resource "aws_vpc" "main" {
    arn                                  = "arn:aws:ec2:us-east-2:051826722045:vpc/vpc-02ec25b78157e3222"
    assign_generated_ipv6_cidr_block     = true
    cidr_block                           = "10.0.0.0/16"
    default_network_acl_id               = "acl-0bf62e014b5046cca"
    default_route_table_id               = "rtb-0f878449c2da1c91e"
    default_security_group_id            = "sg-0611fb92d7af71da6"
    dhcp_options_id                      = "dopt-05c15b81fcb617a34"
    enable_dns_hostnames                 = true
    enable_dns_support                   = true
    enable_network_address_usage_metrics = false
    id                                   = "vpc-02ec25b78157e3222"
    instance_tenancy                     = "default"
    ipv6_association_id                  = "vpc-cidr-assoc-0c4d8f534074d7c05"
    ipv6_cidr_block                      = "2600:1f16:610:4800::/56"
    ipv6_cidr_block_network_border_group = "us-east-2"
    ipv6_netmask_length                  = 0
    main_route_table_id                  = "rtb-0f878449c2da1c91e"
    owner_id                             = "051826722045"
    tags                                 = {
        "Name" = "TestVPC-vpc"
    }
    tags_all                             = {
        "Name" = "TestVPC-vpc"
    }
}
